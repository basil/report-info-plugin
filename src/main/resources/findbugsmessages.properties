# The MIT License
#
# Copyright 2017 Gael COLIN.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

CNT_ROUGH_CONSTANT_VALUE=Rough value of known constant found
SKIPPED_CLASS_TOO_BIG=Class too big for analysis
NOISE_NULL_DEREFERENCE=Bogus warning about a null pointer dereference
NOISE_METHOD_CALL=Bogus warning about a method call
NOISE_FIELD_REFERENCE=Bogus warning about a field reference
NOISE_OPERATION=Bogus warning about an operation
DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE=BigDecimal constructed from double that isn't represented precisely
DMI_DOH=D'oh! A nonsensical method invocation
DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD=Useless/vacuous call to EasyMock method
DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS=Creation of ScheduledThreadPoolExecutor with zero core threads
DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR=Futile attempt to change max pool size of ScheduledThreadPoolExecutor
DMI_UNSUPPORTED_METHOD=Call to unsupported method
DMI_EMPTY_DB_PASSWORD=Empty database password
DMI_CONSTANT_DB_PASSWORD=Hardcoded constant database password
HRS_REQUEST_PARAMETER_TO_COOKIE=HTTP cookie formed from untrusted input
HRS_REQUEST_PARAMETER_TO_HTTP_HEADER=HTTP Response splitting vulnerability
PT_RELATIVE_PATH_TRAVERSAL=Relative path traversal in servlet
PT_ABSOLUTE_PATH_TRAVERSAL=Absolute path traversal in servlet
XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER=Servlet reflected cross site scripting vulnerability
XSS_REQUEST_PARAMETER_TO_SEND_ERROR=Servlet reflected cross site scripting vulnerability in error page
XSS_REQUEST_PARAMETER_TO_JSP_WRITER=JSP reflected cross site scripting vulnerability
SW_SWING_METHODS_INVOKED_IN_SWING_THREAD=Certain swing methods needs to be invoked in Swing thread
IL_INFINITE_LOOP=An apparent infinite loop
IL_INFINITE_RECURSIVE_LOOP=An apparent infinite recursive loop
IL_CONTAINER_ADDED_TO_ITSELF=A collection is added to itself
VO_VOLATILE_REFERENCE_TO_ARRAY=A volatile reference to an array doesn't treat the array elements as volatile
VO_VOLATILE_INCREMENT=An increment to a volatile field isn't atomic
UI_INHERITANCE_UNSAFE_GETRESOURCE=Usage of GetResource may be unsafe if class is extended
NP_BOOLEAN_RETURN_NULL=Method with Boolean return type returns explicit null
NP_OPTIONAL_RETURN_NULL=Method with Optional return type returns explicit null
NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR=Non-null field is not initialized
NP_SYNC_AND_NULL_CHECK_FIELD=Synchronize and null check on the same field.
RpC_REPEATED_CONDITIONAL_TEST=Repeated conditional tests
TESTING=Testing
TESTING1=Testing 1
TESTING2=Testing 2
TESTING3=Testing 3
UNKNOWN=Unknown bug pattern
AM_CREATES_EMPTY_ZIP_FILE_ENTRY=Creates an empty zip file entry
AM_CREATES_EMPTY_JAR_FILE_ENTRY=Creates an empty jar file entry
IMSE_DONT_CATCH_IMSE=Dubious catching of IllegalMonitorStateException
FL_MATH_USING_FLOAT_PRECISION=Method performs math using floating point precision
CAA_COVARIANT_ARRAY_FIELD=Covariant array assignment to a field
CAA_COVARIANT_ARRAY_LOCAL=Covariant array assignment to a local variable
CAA_COVARIANT_ARRAY_RETURN=Covariant array is returned from the method
CAA_COVARIANT_ARRAY_ELEMENT_STORE=Possibly incompatible element is stored in covariant array
CN_IDIOM=Class implements Cloneable but does not define or use clone method
CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE=Class defines clone() but doesn't implement Cloneable
CN_IDIOM_NO_SUPER_CALL=clone method does not call super.clone()
NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER=Use of identifier that is a keyword in later versions of Java
NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER=Use of identifier that is a keyword in later versions of Java
DE_MIGHT_DROP=Method might drop exception
DE_MIGHT_IGNORE=Method might ignore exception
DP_DO_INSIDE_DO_PRIVILEGED=Method invoked that should be only be invoked inside a doPrivileged block
DP_DO_INSIDE_DO_PRIVILEDGED=Method invoked that should be only be invoked inside a doPrivileged block
DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED=Classloaders should only be created inside doPrivileged block
JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS=Fields of immutable classes should be final
DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED=Thread passed where Runnable expected
DMI_COLLECTION_OF_URLS=Maps and sets of URLs can be performance hogs
DMI_BLOCKING_METHODS_ON_URL=The equals and hashCode methods of URL are blocking
DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION=Can't use reflection to check for presence of annotation without runtime retention
DM_EXIT=Method invokes System.exit(...)
DM_RUN_FINALIZERS_ON_EXIT=Method invokes dangerous method runFinalizersOnExit
DM_STRING_CTOR=Method invokes inefficient new String(String) constructor
DM_STRING_VOID_CTOR=Method invokes inefficient new String() constructor
DM_STRING_TOSTRING=Method invokes toString() method on a String
DM_GC=Explicit garbage collection; extremely dubious except in benchmarking code
DM_BOOLEAN_CTOR=Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead
DM_NUMBER_CTOR=Method invokes inefficient Number constructor; use static valueOf instead
DM_FP_NUMBER_CTOR=Method invokes inefficient floating-point Number constructor; use static valueOf instead
DM_CONVERT_CASE=Consider using Locale parameterized version of invoked method
BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR=Primitive value is unboxed and coerced for ternary operator
BX_BOXING_IMMEDIATELY_UNBOXED=Primitive value is boxed and then immediately unboxed
BX_UNBOXING_IMMEDIATELY_REBOXED=Boxed value is unboxed and then immediately reboxed
BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION=Primitive value is boxed then unboxed to perform primitive coercion
DM_BOXED_PRIMITIVE_TOSTRING=Method allocates a boxed primitive just to call toString
DM_BOXED_PRIMITIVE_FOR_PARSING=Boxing/unboxing to parse a primitive
DM_BOXED_PRIMITIVE_FOR_COMPARE=Boxing a primitive to compare
DM_NEW_FOR_GETCLASS=Method allocates an object, only to get the class object
DM_MONITOR_WAIT_ON_CONDITION=Monitor wait() called on Condition
RV_01_TO_INT=Random value from 0 to 1 is coerced to the integer 0
DM_INVALID_MIN_MAX=Incorrect combination of Math.max and Math.min
DM_NEXTINT_VIA_NEXTDOUBLE=Use the nextInt method of Random rather than nextDouble to generate a random integer
SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE=Nonconstant string passed to execute or addBatch method on an SQL statement
SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING=A prepared statement is generated from a nonconstant String
DM_USELESS_THREAD=A thread was created using the default empty run method
DC_DOUBLECHECK=Possible double check of field
DC_PARTIALLY_CONSTRUCTED=Possible exposure of partially initialized object
FI_FINALIZER_NULLS_FIELDS=Finalizer nulls fields
FI_FINALIZER_ONLY_NULLS_FIELDS=Finalizer only nulls fields
FI_PUBLIC_SHOULD_BE_PROTECTED=Finalizer should be protected, not public
FI_EMPTY=Empty finalizer should be deleted
FI_NULLIFY_SUPER=Finalizer nullifies superclass finalizer
FI_USELESS=Finalizer does nothing but call superclass finalizer
FI_MISSING_SUPER_CALL=Finalizer does not call superclass finalizer
FI_EXPLICIT_INVOCATION=Explicit invocation of finalizer
EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS=Equals checks for incompatible operand
EQ_DONT_DEFINE_EQUALS_FOR_ENUM=Covariant equals() method defined for enum
EQ_SELF_USE_OBJECT=Covariant equals() method defined, Object.equals(Object) inherited
EQ_OTHER_USE_OBJECT=equals() method defined that doesn't override Object.equals(Object)
EQ_OTHER_NO_OBJECT=equals() method defined that doesn't override equals(Object)
EQ_DOESNT_OVERRIDE_EQUALS=Class doesn't override equals in superclass
EQ_SELF_NO_OBJECT=Covariant equals() method defined
EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC=equals method overrides equals in superclass and may not be symmetric
EQ_GETCLASS_AND_CLASS_CONSTANT=equals method fails for subtypes
EQ_UNUSUAL=Unusual equals method
EQ_COMPARING_CLASS_NAMES=equals method compares class names rather than class objects
EQ_ALWAYS_TRUE=equals method always returns true
EQ_ALWAYS_FALSE=equals method always returns false
HSC_HUGE_SHARED_STRING_CONSTANT=Huge string constants is duplicated across multiple class files
NP_ARGUMENT_MIGHT_BE_NULL=Method does not check for null argument
NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT=equals() method does not check for null argument
RV_NEGATING_RESULT_OF_COMPARETO=Negating the result of compareTo()/compare()
CO_COMPARETO_RESULTS_MIN_VALUE=compareTo()/compare() returns Integer.MIN_VALUE
CO_COMPARETO_INCORRECT_FLOATING=compareTo()/compare() incorrectly handles float or double value
CO_SELF_NO_OBJECT=Covariant compareTo() method defined
HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS=Signature declares use of unhashable class in hashed construct
HE_USE_OF_UNHASHABLE_CLASS=Use of class without a hashCode() method in a hashed data structure
HE_HASHCODE_USE_OBJECT_EQUALS=Class defines hashCode() and uses Object.equals()
EQ_COMPARETO_USE_OBJECT_EQUALS=Class defines compareTo(...) and uses Object.equals()
HE_HASHCODE_NO_EQUALS=Class defines hashCode() but not equals()
HE_EQUALS_USE_HASHCODE=Class defines equals() and uses Object.hashCode()
HE_INHERITS_EQUALS_USE_HASHCODE=Class inherits equals() and uses Object.hashCode()
HE_EQUALS_NO_HASHCODE=Class defines equals() but not hashCode()
EQ_ABSTRACT_SELF=Abstract class defines covariant equals() method
ES_COMPARING_STRINGS_WITH_EQ=Comparison of String objects using == or !=
ES_COMPARING_PARAMETER_STRING_WITH_EQ=Comparison of String parameter using == or !=
CO_ABSTRACT_SELF=Abstract class defines covariant compareTo() method
IS_FIELD_NOT_GUARDED=Field not guarded against concurrent access
MSF_MUTABLE_SERVLET_FIELD=Mutable servlet field
IS2_INCONSISTENT_SYNC=Inconsistent synchronization
NN_NAKED_NOTIFY=Naked notify
MS_EXPOSE_REP=Public static method may expose internal representation by returning array
EI_EXPOSE_REP=May expose internal representation by returning reference to mutable object
EI_EXPOSE_REP2=May expose internal representation by incorporating reference to mutable object
EI_EXPOSE_STATIC_REP2=May expose internal static state by storing a mutable object into a static field
RU_INVOKE_RUN=Invokes run on a thread (did you mean to start it instead?)
SP_SPIN_ON_FIELD=Method spins on field
NS_DANGEROUS_NON_SHORT_CIRCUIT=Potentially dangerous use of non-short-circuit logic
NS_NON_SHORT_CIRCUIT=Questionable use of non-short-circuit logic
TLW_TWO_LOCK_WAIT=Wait with two locks held
TLW_TWO_LOCK_NOTIFY=Notify with two locks held
UW_UNCOND_WAIT=Unconditional wait
UR_UNINIT_READ=Uninitialized read of field in constructor
UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR=Uninitialized read of field method called from constructor of superclass
UG_SYNC_SET_UNSYNC_GET=Unsynchronized get method, synchronized set method
IC_INIT_CIRCULARITY=Initialization circularity
IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION=Superclass uses subclass during initialization
IT_NO_SUCH_ELEMENT=Iterator next() method can't throw NoSuchElementException
DL_SYNCHRONIZATION_ON_SHARED_CONSTANT=Synchronization on interned String
DL_SYNCHRONIZATION_ON_BOOLEAN=Synchronization on Boolean
DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE=Synchronization on boxed primitive values
DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE=Synchronization on boxed primitive
ESync_EMPTY_SYNC=Empty synchronized block
IS_INCONSISTENT_SYNC=Inconsistent synchronization
ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD=Synchronization on field in futile attempt to guard that field
ML_SYNC_ON_UPDATED_FIELD=Method synchronizes on an updated field
MS_OOI_PKGPROTECT=Field should be moved out of an interface and made package protected
MS_FINAL_PKGPROTECT=Field should be both final and package protected
MS_SHOULD_BE_REFACTORED_TO_BE_FINAL=Field isn't final but should be refactored to be so
MS_SHOULD_BE_FINAL=Field isn't final but should be
MS_PKGPROTECT=Field should be package protected
MS_MUTABLE_HASHTABLE=Field is a mutable Hashtable
MS_MUTABLE_COLLECTION=Field is a mutable collection
MS_MUTABLE_COLLECTION_PKGPROTECT=Field is a mutable collection which should be package protected
MS_MUTABLE_ARRAY=Field is a mutable array
MS_CANNOT_BE_FINAL=Field isn't final and can't be protected from malicious code
ME_MUTABLE_ENUM_FIELD=Enum field is public and mutable
ME_ENUM_FIELD_SETTER=Public enum method unconditionally sets its field
IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD=Potentially ambiguous invocation of either an inherited or outer method
NM_SAME_SIMPLE_NAME_AS_SUPERCLASS=Class names shouldn't shadow simple name of superclass
NM_SAME_SIMPLE_NAME_AS_INTERFACE=Class names shouldn't shadow simple name of implemented interface
NM_CLASS_NAMING_CONVENTION=Class names should start with an upper case letter
NM_METHOD_NAMING_CONVENTION=Method names should start with a lower case letter
NM_FIELD_NAMING_CONVENTION=Field names should start with a lower case letter
NM_VERY_CONFUSING=Very confusing method names
NM_VERY_CONFUSING_INTENTIONAL=Very confusing method names (but perhaps intentional)
NM_WRONG_PACKAGE=Method doesn't override method in superclass due to wrong package for parameter
NM_WRONG_PACKAGE_INTENTIONAL=Method doesn't override method in superclass due to wrong package for parameter
NM_CONFUSING=Confusing method names
NM_METHOD_CONSTRUCTOR_CONFUSION=Apparent method/constructor confusion
NM_LCASE_HASHCODE=Class defines hashcode(); should it be hashCode()?
NM_LCASE_TOSTRING=Class defines tostring(); should it be toString()?
NM_BAD_EQUAL=Class defines equal(Object); should it be equals(Object)?
NM_CLASS_NOT_EXCEPTION=Class is not derived from an Exception, even though it is named as such
RR_NOT_CHECKED=Method ignores results of InputStream.read()
SR_NOT_CHECKED=Method ignores results of InputStream.skip()
SE_READ_RESOLVE_IS_STATIC=The readResolve method must not be declared as a static method.
SE_PRIVATE_READ_RESOLVE_NOT_INHERITED=Private readResolve method not inherited by subclasses
SE_READ_RESOLVE_MUST_RETURN_OBJECT=The readResolve method must be declared with a return type of Object.
SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS=Transient field of class that isn't Serializable.
SE_TRANSIENT_FIELD_NOT_RESTORED=Transient field that isn't set by deserialization.
SE_METHOD_MUST_BE_PRIVATE=Method must be private in order for serialization to work
SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION=Class is Externalizable but doesn't define a void constructor
SE_NO_SUITABLE_CONSTRUCTOR=Class is Serializable but its superclass doesn't define a void constructor
SE_NO_SERIALVERSIONID=Class is Serializable, but doesn't define serialVersionUID
SE_COMPARATOR_SHOULD_BE_SERIALIZABLE=Comparator doesn't implement Serializable
SF_SWITCH_FALLTHROUGH=Switch statement found where one case falls through to the next case
SF_SWITCH_NO_DEFAULT=Switch statement found where default case is missing
SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH=Dead store due to switch statement fall through
SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW=Dead store due to switch statement fall through to throw
WS_WRITEOBJECT_SYNC=Class's writeObject() method is synchronized but nothing else is
RS_READOBJECT_SYNC=Class's readObject() method is synchronized
SE_NONSTATIC_SERIALVERSIONID=serialVersionUID isn't static
SE_NONFINAL_SERIALVERSIONID=serialVersionUID isn't final
SE_NONLONG_SERIALVERSIONID=serialVersionUID isn't long
SE_BAD_FIELD=Non-transient non-serializable instance field in serializable class
SE_BAD_FIELD_INNER_CLASS=Non-serializable class has a serializable inner class
SE_INNER_CLASS=Serializable inner class
SE_BAD_FIELD_STORE=Non-serializable value stored into instance field of a serializable class
SC_START_IN_CTOR=Constructor invokes Thread.start()
SS_SHOULD_BE_STATIC=Unread field: should this field be static?
UUF_UNUSED_FIELD=Unused field
URF_UNREAD_FIELD=Unread field
UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD=Unused public or protected field
URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD=Unread public/protected field
QF_QUESTIONABLE_FOR_LOOP=Complicated, subtle or wrong increment in for-loop
UWF_NULL_FIELD=Field only ever set to null
UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD=Unwritten public or protected field
UWF_UNWRITTEN_FIELD=Unwritten field
ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD=Write to static field from instance method
NP_LOAD_OF_KNOWN_NULL_VALUE=Load of known null value
NP_DEREFERENCE_OF_READLINE_VALUE=Dereference of the result of readLine() without nullcheck
NP_IMMEDIATE_DEREFERENCE_OF_READLINE=Immediate dereference of the result of readLine()
NP_UNWRITTEN_FIELD=Read of unwritten field
NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD=Read of unwritten public or protected field
SIC_THREADLOCAL_DEADLY_EMBRACE=Deadly embrace of non-static inner class and thread local
SIC_INNER_SHOULD_BE_STATIC=Should be a static inner class
UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR=Field not initialized in constructor but dereferenced without null check
SIC_INNER_SHOULD_BE_STATIC_ANON=Could be refactored into a named static inner class
SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS=Could be refactored into a static inner class
WA_NOT_IN_LOOP=Wait not in loop
WA_AWAIT_NOT_IN_LOOP=Condition.await() not in loop
NO_NOTIFY_NOT_NOTIFYALL=Using notify() rather than notifyAll()
UC_USELESS_VOID_METHOD=Useless non-empty void method
UC_USELESS_CONDITION=Condition has no effect
UC_USELESS_CONDITION_TYPE=Condition has no effect due to the variable type
UC_USELESS_OBJECT=Useless object created
UC_USELESS_OBJECT_STACK=Useless object created on stack
RANGE_ARRAY_INDEX=Array index is out of bounds
RANGE_ARRAY_OFFSET=Array offset is out of bounds
RANGE_ARRAY_LENGTH=Array length is out of bounds
RANGE_STRING_INDEX=String index is out of bounds
RV_CHECK_FOR_POSITIVE_INDEXOF=Method checks to see if result of String.indexOf is positive
RV_DONT_JUST_NULL_CHECK_READLINE=Method discards result of readLine after checking if it is non-null
RV_RETURN_VALUE_IGNORED_INFERRED=Method ignores return value, is this OK?
RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT=Return value of method without side effect is ignored
RV_RETURN_VALUE_IGNORED=Method ignores return value
RV_RETURN_VALUE_IGNORED_BAD_PRACTICE=Method ignores exceptional return value
RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE=Code checks for specific values returned by compareTo
RV_EXCEPTION_NOT_THROWN=Exception created and dropped rather than thrown
NP_ALWAYS_NULL=Null pointer dereference
NP_CLOSING_NULL=close() invoked on a value that is always null
NP_STORE_INTO_NONNULL_FIELD=Store of null value into field annotated @Nonnull
NP_ALWAYS_NULL_EXCEPTION=Null pointer dereference in method on exception path
NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE=Parameter must be non-null but is marked as nullable
NP_NULL_ON_SOME_PATH=Possible null pointer dereference
NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE=Possible null pointer dereference on branch that might be infeasible
NP_NULL_ON_SOME_PATH_EXCEPTION=Possible null pointer dereference in method on exception path
NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE=Possible null pointer dereference due to return value of called method
NP_NULL_PARAM_DEREF_NONVIRTUAL=Non-virtual method call passes null for non-null parameter
NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS=Method call passes null for non-null parameter
NP_NULL_PARAM_DEREF=Method call passes null for non-null parameter
NP_NONNULL_PARAM_VIOLATION=Method call passes null to a non-null parameter
NP_NONNULL_RETURN_VIOLATION=Method may return null, but is declared @Nonnull
NP_CLONE_COULD_RETURN_NULL=Clone method may return null
NP_TOSTRING_COULD_RETURN_NULL=toString method may return null
NP_GUARANTEED_DEREF=Null value is guaranteed to be dereferenced
NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH=Value is null and guaranteed to be dereferenced on exception path
SI_INSTANCE_BEFORE_FINALS_ASSIGNED=Static initializer creates instance before all static final fields assigned
OS_OPEN_STREAM=Method may fail to close stream
OS_OPEN_STREAM_EXCEPTION_PATH=Method may fail to close stream on exception
PZLA_PREFER_ZERO_LENGTH_ARRAYS=Consider returning a zero length array rather than null
UCF_USELESS_CONTROL_FLOW=Useless control flow
UCF_USELESS_CONTROL_FLOW_NEXT_LINE=Useless control flow to next line
RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE=Nullcheck of value previously dereferenced
RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE=Redundant nullcheck of value known to be null
RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE=Redundant nullcheck of value known to be non-null
RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES=Redundant comparison of two null values
RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE=Redundant comparison of non-null value to null
RCN_REDUNDANT_CHECKED_NULL_COMPARISON=Redundant comparison to null of previously checked value
UL_UNRELEASED_LOCK=Method does not release lock on all paths
UL_UNRELEASED_LOCK_EXCEPTION_PATH=Method does not release lock on all exception paths
RC_REF_COMPARISON=Suspicious reference comparison
RC_REF_COMPARISON_BAD_PRACTICE=Suspicious reference comparison to constant
RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN=Suspicious reference comparison of Boolean values
EC_UNRELATED_TYPES_USING_POINTER_EQUALITY=Using pointer equality to compare different types
EC_UNRELATED_TYPES=Call to equals() comparing different types
EC_UNRELATED_INTERFACES=Call to equals() comparing different interface types
EC_UNRELATED_CLASS_AND_INTERFACE=Call to equals() comparing unrelated class and interface
EC_NULL_ARG=Call to equals(null)
MWN_MISMATCHED_WAIT=Mismatched wait()
MWN_MISMATCHED_NOTIFY=Mismatched notify()
SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD=Self assignment of local rather than assignment to field
SA_LOCAL_SELF_ASSIGNMENT=Self assignment of local variable
SA_FIELD_SELF_ASSIGNMENT=Self assignment of field
SA_FIELD_DOUBLE_ASSIGNMENT=Double assignment of field
SA_LOCAL_DOUBLE_ASSIGNMENT=Double assignment of local variable
SA_FIELD_SELF_COMPUTATION=Nonsensical self computation involving a field (e.g., x & x)
SA_LOCAL_SELF_COMPUTATION=Nonsensical self computation involving a variable (e.g., x & x)
SA_FIELD_SELF_COMPARISON=Self comparison of field with itself
SA_LOCAL_SELF_COMPARISON=Self comparison of value with itself
DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT=Double.longBitsToDouble invoked on an int
DMI_ARGUMENTS_WRONG_ORDER=Reversed method arguments
DMI_RANDOM_USED_ONLY_ONCE=Random object created and used only once
RV_ABSOLUTE_VALUE_OF_RANDOM_INT=Bad attempt to compute absolute value of signed random integer
RV_ABSOLUTE_VALUE_OF_HASHCODE=Bad attempt to compute absolute value of signed 32-bit hashcode
RV_REM_OF_RANDOM_INT=Remainder of 32-bit signed random integer
RV_REM_OF_HASHCODE=Remainder of hashCode could be negative
INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE=Bad comparison of nonnegative value with negative constant or zero
INT_BAD_COMPARISON_WITH_SIGNED_BYTE=Bad comparison of signed byte
INT_BAD_COMPARISON_WITH_INT_VALUE=Bad comparison of int value with long constant
INT_VACUOUS_BIT_OPERATION=Vacuous bit mask operation on integer value
INT_VACUOUS_COMPARISON=Vacuous comparison of integer value
INT_BAD_REM_BY_1=Integer remainder modulo 1
BIT_IOR_OF_SIGNED_BYTE=Bitwise OR of signed byte value
BIT_ADD_OF_SIGNED_BYTE=Bitwise add of signed byte value
BIT_AND=Incompatible bit masks
BIT_SIGNED_CHECK=Check for sign of bitwise operation
BIT_SIGNED_CHECK_HIGH_BIT=Check for sign of bitwise operation
BIT_AND_ZZ=Check to see if ((...) & 0) == 0
BIT_IOR=Incompatible bit masks
LI_LAZY_INIT_INSTANCE=Incorrect lazy initialization of instance field
LI_LAZY_INIT_STATIC=Incorrect lazy initialization of static field
LI_LAZY_INIT_UPDATE_STATIC=Incorrect lazy initialization and update of static field
JLM_JSR166_LOCK_MONITORENTER=Synchronization performed on Lock
JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT=Using monitor style wait methods on util.concurrent abstraction
JLM_JSR166_UTILCONCURRENT_MONITORENTER=Synchronization performed on util.concurrent instance
UPM_UNCALLED_PRIVATE_METHOD=Private method is never called
UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS=Uncallable method defined in anonymous class
ODR_OPEN_DATABASE_RESOURCE=Method may fail to close database resource
ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH=Method may fail to close database resource on exception
SBSC_USE_STRINGBUFFER_CONCATENATION=Method concatenates strings using + in a loop
IIL_PREPARE_STATEMENT_IN_LOOP=Method calls prepareStatement in a loop
IIL_ELEMENTS_GET_LENGTH_IN_LOOP=NodeList.getLength() called in a loop
IIL_PATTERN_COMPILE_IN_LOOP=Method calls Pattern.compile in a loop
IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT=Method compiles the regular expression in a loop
IIO_INEFFICIENT_INDEX_OF=Inefficient use of String.indexOf(String)
IIO_INEFFICIENT_LAST_INDEX_OF=Inefficient use of String.lastIndexOf(String)
ITA_INEFFICIENT_TO_ARRAY=Method uses toArray() with zero-length array argument
IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD=JUnit assertion in run method will not be noticed by JUnit
IJU_SETUP_NO_SUPER=TestCase defines setUp that doesn't call super.setUp()
IJU_TEARDOWN_NO_SUPER=TestCase defines tearDown that doesn't call super.tearDown()
IJU_SUITE_NOT_STATIC=TestCase implements a non-static suite method
IJU_BAD_SUITE_METHOD=TestCase declares a bad suite method
IJU_NO_TESTS=TestCase has no tests
BOA_BADLY_OVERRIDDEN_ADAPTER=Class overrides a method implemented in super class Adapter wrongly
BRSA_BAD_RESULTSET_ACCESS=Method attempts to access a result set field with index 0
SQL_BAD_RESULTSET_ACCESS=Method attempts to access a result set field with index 0
SQL_BAD_PREPARED_STATEMENT_ACCESS=Method attempts to access a prepared statement parameter with index 0
SIO_SUPERFLUOUS_INSTANCEOF=Unnecessary type check done using instanceof operator
BAC_BAD_APPLET_CONSTRUCTOR=Bad Applet Constructor relies on uninitialized AppletStub
EC_ARRAY_AND_NONARRAY=equals() used to compare array and nonarray
EC_BAD_ARRAY_COMPARE=Invocation of equals() on an array, which is equivalent to ==
EC_INCOMPATIBLE_ARRAY_COMPARE=equals(...) used to compare incompatible arrays
STI_INTERRUPTED_ON_CURRENTTHREAD=Unneeded use of currentThread() call, to call interrupted()
STI_INTERRUPTED_ON_UNKNOWNTHREAD=Static Thread.interrupted() method invoked on thread instance
IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN=A parameter is dead upon entry to a method but overwritten
DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD=Dead store to local variable that shadows field
DLS_DEAD_LOCAL_STORE=Dead store to local variable
DLS_DEAD_LOCAL_STORE_IN_RETURN=Useless assignment in return statement
DLS_DEAD_LOCAL_INCREMENT_IN_RETURN=Useless increment in return statement
DLS_DEAD_STORE_OF_CLASS_LITERAL=Dead store of class literal
DLS_DEAD_LOCAL_STORE_OF_NULL=Dead store of null to local variable
MF_METHOD_MASKS_FIELD=Method defines a variable that obscures a field
MF_CLASS_MASKS_FIELD=Class defines field that masks a superclass field
WMI_WRONG_MAP_ITERATOR=Inefficient use of keySet iterator instead of entrySet iterator
ISC_INSTANTIATE_STATIC_CLASS=Needless instantiation of class that only supplies static methods
REC_CATCH_EXCEPTION=Exception is caught when Exception is not thrown
FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER=Doomed test for equality to NaN
FE_FLOATING_POINT_EQUALITY=Test for floating point equality
UM_UNNECESSARY_MATH=Method calls static Math class method on a constant value
CD_CIRCULAR_DEPENDENCY=Test for circular dependencies among classes
RI_REDUNDANT_INTERFACES=Class implements same interface as superclass
MTIA_SUSPECT_STRUTS_INSTANCE_FIELD=Class extends Struts Action class and uses instance variables
MTIA_SUSPECT_SERVLET_INSTANCE_FIELD=Class extends Servlet class and uses instance variables
PS_PUBLIC_SEMAPHORES=Class exposes synchronization and semaphores in its public interface
ICAST_INTEGER_MULTIPLY_CAST_TO_LONG=Result of integer multiplication cast to long
ICAST_INT_2_LONG_AS_INSTANT=int value converted to long and used as absolute time
ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND=int value cast to float and then passed to Math.round
ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL=Integral value cast to double and then passed to Math.ceil
ICAST_IDIV_CAST_TO_DOUBLE=Integral division result cast to double or float
J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION=Store of non serializable object into HttpSession
DMI_NONSERIALIZABLE_OBJECT_WRITTEN=Non serializable object written to ObjectOutput
VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT=No previous argument for format string
VA_FORMAT_STRING_USES_NEWLINE=Format string should use %n rather than \n
VA_FORMAT_STRING_BAD_CONVERSION=The type of a supplied argument doesn't match format specifier
VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN=Non-Boolean argument formatted using %b format specifier
VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY=Array formatted in useless way using format string
VA_FORMAT_STRING_ARG_MISMATCH=Number of format-string arguments does not correspond to number of placeholders
VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED=MessageFormat supplied where printf style format expected
VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED=More arguments are passed than are actually used in the format string
VA_FORMAT_STRING_ILLEGAL=Illegal format string
VA_FORMAT_STRING_MISSING_ARGUMENT=Format string references missing argument
VA_FORMAT_STRING_BAD_ARGUMENT=Format string placeholder incompatible with passed argument
VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG=Primitive array passed to function expecting a variable number of object arguments
BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS=Equals method should not assume anything about the type of its argument
BC_BAD_CAST_TO_ABSTRACT_COLLECTION=Questionable cast to abstract collection
BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY=Impossible cast involving primitive array
BC_IMPOSSIBLE_CAST=Impossible cast
BC_IMPOSSIBLE_DOWNCAST=Impossible downcast
BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY=Impossible downcast of toArray() result
NP_NULL_INSTANCEOF=A known null value is checked to see if it is an instance of a type
BC_NULL_INSTANCEOF=A known null value is checked to see if it is an instance of a type
BC_IMPOSSIBLE_INSTANCEOF=instanceof will always return false
BC_VACUOUS_INSTANCEOF=instanceof will always return true
BC_UNCONFIRMED_CAST=Unchecked/unconfirmed cast
BC_UNCONFIRMED_CAST_OF_RETURN_VALUE=Unchecked/unconfirmed cast of return value from method
BC_BAD_CAST_TO_CONCRETE_COLLECTION=Questionable cast to concrete collection
RE_POSSIBLE_UNINTENDED_PATTERN="." or "|" used for regular expression
RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION=Invalid syntax for regular expression
RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION=File.separator used for regular expression
DLS_OVERWRITTEN_INCREMENT=Overwritten increment
ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT=Unsigned right shift cast to short/byte
BSHIFT_WRONG_ADD_PRIORITY=Possible bad parsing of shift operation
ICAST_BAD_SHIFT_AMOUNT=32 bit int shifted by an amount not in the range -31..31
IM_MULTIPLYING_RESULT_OF_IREM=Integer multiply of result of integer remainder
DMI_INVOKING_HASHCODE_ON_ARRAY=Invocation of hashCode on an array
DMI_INVOKING_TOSTRING_ON_ARRAY=Invocation of toString on an array
DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY=Invocation of toString on an unnamed array
IM_AVERAGE_COMPUTATION_COULD_OVERFLOW=Computation of average could overflow
IM_BAD_CHECK_FOR_ODD=Check for oddness that won't work for negative numbers
DMI_HARDCODED_ABSOLUTE_FILENAME=Code contains a hard coded reference to an absolute pathname
DMI_BAD_MONTH=Bad constant value for month
DMI_USELESS_SUBSTRING=Invocation of substring(0), which returns the original value
DMI_CALLING_NEXT_FROM_HASNEXT=hasNext method invokes next
SWL_SLEEP_WITH_LOCK_HELD=Method calls Thread.sleep() with a lock held
DB_DUPLICATE_BRANCHES=Method uses the same code for two branches
DB_DUPLICATE_SWITCH_CLAUSES=Method uses the same code for two switch clauses
IMA_INEFFICIENT_MEMBER_ACCESS=Method accesses a private member variable of owning class
XFB_XML_FACTORY_BYPASS=Method directly allocates a specific implementation of xml interfaces
USM_USELESS_SUBCLASS_METHOD=Method superfluously delegates to parent class method
USM_USELESS_ABSTRACT_METHOD=Abstract Method is already defined in implemented interface
CI_CONFUSED_INHERITANCE=Class is final but declares protected field
QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT=Method assigns boolean literal in boolean expression
VR_UNRESOLVABLE_REFERENCE=Class makes reference to unresolvable class or method
GC_UNCHECKED_TYPE_IN_GENERIC_CALL=Unchecked type in generic call
GC_UNRELATED_TYPES=No relationship between generic parameter and method argument
DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES=Collections should not contain themselves
DMI_VACUOUS_SELF_COLLECTION_CALL=Vacuous call to collections
PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS=Don't reuse entry objects in iterators
DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS=Adding elements of an entry set may fail due to reuse of Entry objects
DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION=Don't use removeAll to clear a collection
STCAL_STATIC_CALENDAR_INSTANCE=Static Calendar field
STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE=Call to static Calendar
STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE=Static DateFormat
STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE=Call to static DateFormat
TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS=Comparing values with incompatible type qualifiers
TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED=Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required
TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED=Value without a type qualifier used where a value is required to have that qualifier
TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED=Value annotated as never carrying a type qualifier used where value carrying that qualifier is required
TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK=Value that might not carry a type qualifier is always used in a way requires that type qualifier
TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK=Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier
TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK=Value required to not have type qualifier, but marked as unknown
TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK=Value required to have type qualifier, but marked as unknown
IO_APPENDING_TO_OBJECT_OUTPUT_STREAM=Doomed attempt to append to an object output stream
WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL=Synchronization on getClass rather than class literal
OBL_UNSATISFIED_OBLIGATION=Method may fail to clean up stream or resource
OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE=Method may fail to clean up stream or resource on checked exception
FB_UNEXPECTED_WARNING=Unexpected/undesired warning from FindBugs
FB_MISSING_EXPECTED_WARNING=Missing expected or desired warning from FindBugs
RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED=Return value of putIfAbsent ignored, value passed to putIfAbsent reused
LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE=Potential lost logger changes due to weak reference in OpenJDK
AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION=Sequence of calls to concurrent abstraction may not be atomic
DM_DEFAULT_ENCODING=Reliance on default encoding
NP_METHOD_PARAMETER_RELAXING_ANNOTATION=Method tightens nullness annotation on parameter
NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION=Method tightens nullness annotation on parameter
NP_METHOD_RETURN_RELAXING_ANNOTATION=Method relaxes nullness annotation on return value
